import { SignIn, SignInButton, SignOutButton, useUser } from "@clerk/nextjs";
import Head from "next/head";
import Image from "next/image";

import { api } from "~/utils/api";
import type { RouterOutputs } from "~/utils/api";

import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";

dayjs.extend(relativeTime);

const CreatePostWizard = () => {
  const { user } = useUser();

  if (!user) {
    return null;
  }

  return (
    <div className="flex w-full gap-3">
      <Image
        src={user.imageUrl}
        alt="profile-image"
        className="h-14 w-14 rounded-full"
        width={56}
        height={56}
      ></Image>
      <input
        placeholder="Type some emojis!!!"
        className="grow bg-transparent outline-none"
      ></input>
    </div>
  );
};

// neat trick to keep prisma as the single source of truth in type definitions
type PostWithUser = RouterOutputs["posts"]["getAll"][number];
const PostView = (props: PostWithUser) => {
  const { post, author } = props;
  return (
    <>
      <div className="flex gap-3 border-b border-slate-400 p-4">
        <Image
          src={author.imageUrl}
          className="h-14 w-14 rounded-full"
          width={56}
          height={56}
          alt="Author profile pic"
        ></Image>
        <div className="flex flex-col">
          <div className="flex gap-1.5 text-slate-300">
            <span>{`@${author.username}`}</span>
            <span>Â·</span>
            <span className="font-thin">{`${dayjs(post.createdAt).fromNow()}`}</span>
          </div>
          <span className="">{post.content}</span>
        </div>
      </div>
    </>
  );
};

export default function Home() {
  const user = useUser();

  console.log(user.user?.id);

  // useful properties you can get
  const { data, isLoading } = api.posts.getAll.useQuery();

  if (isLoading) {
    return <div>Loading...</div>;
  }

  if (!data) {
    return <div>Something went wrong</div>;
  }

  console.log(data);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* should put classes in the globals.css files since that would be the first to be rendered -> provide a more complete experience */}
      <main className="flex h-screen justify-center">
        {/* main content */}
        {/* process of doing styling is really just trial and error with numbers??? */}
        <div className="h-full w-full border-x border-slate-400 md:max-w-2xl">
          {" "}
          {/* imposes the max width for md and above sized screens */}
          <div className="flex border-b border-slate-400 p-4">
            <div className="flex w-full justify-evenly">
              {!user.isSignedIn ? (
                <SignInButton>
                  <button>Sign in</button>
                </SignInButton>
              ) : (
                <>
                  <CreatePostWizard />
                  <SignOutButton>
                    <button>Sign out</button>
                  </SignOutButton>
                </>
              )}
            </div>
          </div>
          <div className="flex flex-col">
            {data?.map((fullPost) => (
              <PostView {...fullPost} key={fullPost.post.id} />
            ))}
          </div>
        </div>
      </main>
    </>
  );
}
